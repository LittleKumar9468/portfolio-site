// server.js
const express = require('express');
const mongoose = require('mongoose');

const ProductSchema = new mongoose.Schema({
    name: {
        type: String,
        required: [true, 'Product name is required.'],
        trim: true,
        maxlength: [100, 'Name cannot be more than 100 characters']
    },
    price: {
        type: Number,
        required: [true, 'Price is required.'],
        min: [0, 'Price must be a non-negative number']
    },
    category: {
        type: String,
        required: [true, 'Category is required.'],
        enum: ['Electronics', 'Accessories', 'Stationery', 'Apparel', 'Other'],
        default: 'Other'
    }
}, {
    timestamps: true
});

const Product = mongoose.model('Product', ProductSchema);

const app = express();
const PORT = 3000;
// NOTE: Change this URI to your actual MongoDB connection string
const MONGO_URI = "mongodb://localhost:27017/productDB"; 

// Middleware
app.use(express.json()); // To parse incoming JSON requests

const connectDB = async () => {
    try {
        await mongoose.connect(MONGO_URI);
        console.log('MongoDB connected successfully! ðŸš€');
    } catch (err) {
        console.error('MongoDB connection error:', err.message);
        process.exit(1); 
    }
};

connectDB();


// A. CREATE: Add a new product (POST /products)
app.post('/products', async (req, res) => {
    try {
        const product = await Product.create(req.body);
        // 201 Created Status
        res.status(201).json(product); 
    } catch (err) {
        // Handle Mongoose validation errors
        if (err.name === 'ValidationError') {
            const messages = Object.values(err.errors).map(val => val.message);
            return res.status(400).json({ error: messages.join(', ') });
        }
        res.status(500).json({ error: 'Server error while creating product.' });
    }
});

// B. READ ALL: Retrieve all products (GET /products)
app.get('/products', async (req, res) => {
    try {
        const products = await Product.find({});
        // 200 OK Status
        res.status(200).json(products); 
    } catch (err) {
        res.status(500).json({ error: 'Server error while fetching products.' });
    }
});

// C. UPDATE: Update a product by ID (PUT /products/:id)
app.put('/products/:id', async (req, res) => {
    try {
        const product = await Product.findByIdAndUpdate(
            req.params.id, 
            req.body, { 
                new: true, // Return the updated document
                runValidators: true // Rerun schema validation on update
            }
        );

        if (!product) {
            return res.status(404).json({ error: `Product with ID ${req.params.id} not found.` });
        }
        
        // 200 OK Status
        res.status(200).json(product);
    } catch (err) {
        // Handle invalid ID format or validation errors
        if (err.name === 'CastError') {
             return res.status(400).json({ error: `Invalid product ID format.` });
        }
        if (err.name === 'ValidationError') {
            const messages = Object.values(err.errors).map(val => val.message);
            return res.status(400).json({ error: messages.join(', ') });
        }
        res.status(500).json({ error: 'Server error while updating product.' });
    }
});

// D. DELETE: Delete a product by ID (DELETE /products/:id)
app.delete('/products/:id', async (req, res) => {
    try {
        const product = await Product.findByIdAndDelete(req.params.id);

        if (!product) {
            return res.status(404).json({ error: `Product with ID ${req.params.id} not found.` });
        }
        
        // 200 OK Status with the deleted product details
        res.status(200).json({ 
            message: 'Product deleted successfully.',
            product: product 
        });
    } catch (err) {
        // Handle invalid ID format
        if (err.name === 'CastError') {
             return res.status(400).json({ error: `Invalid product ID format.` });
        }
        res.status(500).json({ error: 'Server error while deleting product.' });
    }
});


// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
