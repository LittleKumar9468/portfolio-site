// Load the Express library
import express from 'express';

// --- Configuration ---
const app = express();
const PORT = 3000;
const SECRET_TOKEN = 'mysecrettoken';

// --- 1. Logging Middleware ---
/**
 * Middleware function to log incoming requests.
 * Applied globally to all requests.
 */
const loggingMiddleware = (req, res, next) => {
    const timestamp = new Date().toISOString();
    // Log to the console (server-side)
    console.log(`[${timestamp}] ${req.method} ${req.url}`);
    next(); // Pass control to the next middleware or route handler
};

// --- 2. Authentication Middleware (Bearer Token) ---
/**
 * Middleware function to authenticate requests using a Bearer token.
 * Only grants access if the token is 'mysecrettoken'.
 */
const authenticateBearerToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];

    // Check if the header exists or is correctly formatted (e.g., "Bearer token")
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        // HTTP Status 401: Unauthorized
        return res.status(401).json({
            message: 'Authorization header missing or incorrect'
        });
    }

    // Extract the token (everything after "Bearer ")
    const token = authHeader.split(' ')[1];
    
    // Validate the token against the secret
    if (token === SECRET_TOKEN) {
        // Token is correct, proceed to the protected route handler
        console.log('--- Authentication successful for protected route. ---');
        next();
    } else {
        // HTTP Status 401: Unauthorized
        return res.status(401).json({
            message: 'Invalid Bearer token provided'
        });
    }
};

// --- Global Middleware Application ---
// Apply the logging middleware to ALL incoming requests
app.use(loggingMiddleware);

// --- Routes ---

// 1. Public Route (No authentication required)
app.get('/public', (req, res) => {
    res.status(200).send('This is a public route. No authentication required.');
});

// 2. Protected Route (Requires the authenticateBearerToken middleware)
// The middleware runs BEFORE the route handler
app.get('/protected', authenticateBearerToken, (req, res) => {
    res.status(200).send('You have accessed a protected route with a valid Bearer token!');
});

// --- Server Startup ---
app.listen(PORT, () => {
    console.log(`Server is running at http://localhost:${PORT}`);
    console.log('Use "mysecrettoken" in the Authorization: Bearer header to access /protected.');
});
